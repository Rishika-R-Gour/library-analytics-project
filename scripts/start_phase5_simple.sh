#!/bin/bash

# Phase 5 Library Management System Startup Script
echo "üöÄ Starting Phase 5 Library Management System..."

# Set the project directory and Python executable
PROJECT_DIR="/Users/rishikagour/library_analytics_project"
PYTHON_EXEC="/Users/rishikagour/library_analytics_project/env/bin/python"

cd "$PROJECT_DIR"

# Check if we're in the correct directory
if [ ! -f "setup_phase5_database.py" ]; then
    echo "‚ùå Error: Please run this script from the project root directory"
    exit 1
fi

# Create necessary directories
mkdir -p logs
mkdir -p data

# Function to cleanup existing processes
cleanup_processes() {
    echo "üßπ Cleaning up existing processes..."
    pkill -f "advanced_api.py" 2>/dev/null || true
    pkill -f "library_management_api.py" 2>/dev/null || true
    pkill -f "app.py" 2>/dev/null || true
    pkill -f "streamlit" 2>/dev/null || true
    sleep 2
    echo "‚úÖ Cleanup complete"
}

cleanup_processes

# Initialize Phase 5 database
echo "üìä Initializing Phase 5 database..."
$PYTHON_EXEC setup_phase5_database.py
if [ $? -eq 0 ]; then
    echo "‚úÖ Phase 5 database initialized successfully"
else
    echo "‚ùå Database initialization failed"
    exit 1
fi

echo ""
echo "üîß Starting services..."

# Start Library Management API  
echo "üèõÔ∏è Starting Library Management API on port 5003..."
cd app
$PYTHON_EXEC library_management_api_clean.py &
API_PID=$!
cd ..
sleep 5

# Start Advanced API (Phase 3)
echo "üîß Starting Advanced API on port 5002..."
cd app
$PYTHON_EXEC advanced_api.py &
ADV_API_PID=$!
cd ..
sleep 5

# Start Dashboard
echo "üìä Starting Dashboard on port 8502..."
cd dashboard
$PYTHON_EXEC -m streamlit run advanced_dashboard.py --server.port 8502 &
DASH_PID=$!
cd ..
sleep 8

echo ""
echo "üîç Performing health checks..."

# Health checks
echo -n "üìö Library Management API: "
if curl -s http://localhost:5003/api/health > /dev/null 2>&1; then
    echo "‚úÖ Working"
else
    echo "‚ùå Not responding"
fi

echo -n "üîß Advanced API: "
if curl -s http://localhost:5002/api/health > /dev/null 2>&1; then
    echo "‚úÖ Working"
else
    echo "‚ùå Not responding"
fi

echo -n "üìä Dashboard: "
if curl -s http://localhost:8502 > /dev/null 2>&1; then
    echo "‚úÖ Working"
else
    echo "‚ùå Not responding"
fi

echo ""
echo "üéâ Phase 5 System Started!"
echo "=========================="
echo ""
echo "üîó Service URLs:"
echo "  üìö Library Management API:  http://localhost:5003"
echo "  üîß Advanced User API:       http://localhost:5002"
echo "  üìà Enhanced Dashboard:       http://localhost:8502"
echo ""
echo "üìö Key Endpoints:"
echo "  ‚Ä¢ Book Catalog:        http://localhost:5003/api/books"
echo "  ‚Ä¢ Search Books:        http://localhost:5003/api/search?q=python"
echo "  ‚Ä¢ Library Stats:       http://localhost:5003/api/dashboard/library-stats"
echo "  ‚Ä¢ Health Check:        http://localhost:5003/api/health"
echo ""
echo "üë§ Test Accounts:"
echo "  ‚Ä¢ Admin:     admin / admin123"
echo "  ‚Ä¢ Librarian: librarian / lib123"
echo "  ‚Ä¢ Member:    member / member123"
echo ""
echo "üí° Features Available:"
echo "  ‚úÖ Complete Book Catalog (10 sample books)"
echo "  ‚úÖ Real Loan Processing"
echo "  ‚úÖ Advanced Search & Discovery"
echo "  ‚úÖ Member Loan History"
echo "  ‚úÖ Book Reviews & Ratings"
echo "  ‚úÖ Library Statistics"
echo "  ‚úÖ Multi-role Authentication"
echo ""
echo "Process IDs:"
echo "  Library API: $API_PID"
echo "  Advanced API: $ADV_API_PID"
echo "  Dashboard: $DASH_PID"
echo ""
echo "Press Ctrl+C to stop all services"

# Test API with sample data
echo ""
echo "üìö Sample Library Data:"
if curl -s http://localhost:5003/api/books 2>/dev/null | head -c 200 > /dev/null 2>&1; then
    echo "‚úÖ Library catalog loaded with sample books"
else
    echo "‚ÑπÔ∏è  Library API may still be initializing..."
fi

# Keep the script running
wait
